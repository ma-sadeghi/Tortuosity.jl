var documenterSearchIndex = {"docs":
[{"location":"variable_diffusivity/#Variable-diffusivity","page":"Variable diffusivity","title":"Variable diffusivity","text":"","category":"section"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"You can use Tortuosity.jl to compute the tortuosity factor of a porous medium (or non-porous for that matter!) with variable diffusivity, i.e., you can assign a custom diffusivity value to each voxel in the image. This is useful when you have a heterogeneous medium, where the diffusivity varies across the domain, like a fractured rock, or a non-porous medium made of different materials, e.g., a bubbly mixture.","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"The workflow is similar to the basic usage, but you need to define a custom diffusivity field. Here are two examples:","category":"page"},{"location":"variable_diffusivity/#Entire-image-as-domain","page":"Variable diffusivity","title":"Entire image as domain","text":"","category":"section"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"Assume you have a binary image where the true voxels are 5x more conductive than the false voxels. Note that tortuosity is ill-defined in this case, since we're not really dealing with a porous medium. In such cases, the concentration field is the important quantity to compute, but you can still compute the tortuosity factor for the sake of comparison!","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"using Tortuosity\nusing Tortuosity: tortuosity, vec_to_grid\n\nUSE_GPU = false\n\n# Generate a test image\nimg = Imaginator.blobs(; shape=(64, 64, 1), porosity=0.65, blobiness=0.5, seed=2)\n\n# Define the diffusivity field\nD = zeros(size(img))\nD[img] .= 1.0       # More conductive phase\nD[.!img] .= 0.2     # Less conductive phase\ndomain = D .> 0     # Define domain as only-conducting voxels (i.e., the entire image)\n\n# Define the simulation\nsim = TortuositySimulation(domain; axis=:x, D=D, gpu=USE_GPU);\n\n# Solve the system of equations\nsol = solve(sim.prob, KrylovJL_CG())\n\n# Convert the solution vector to an Nd grid\nc = vec_to_grid(sol.u, domain)\n# Compute the tortuosity factor\nτ = tortuosity(c; axis=:x, D=D)\nprintln(\"τ = $τ\")\n\n# Visualize the concentration field\nusing Plots\nheatmap(img[:,:,1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"img-plot.svg\"); nothing # hide\nheatmap(c[:, :, 1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"c-plot.svg\"); nothing # hide","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"HTML(\"\"\"<figure><img src=$(joinpath(Main.buildpath,\"img-plot.svg\"))><figcaption>Original binary image used to assign diffusivity</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"HTML(\"\"\"<figure><img src=$(joinpath(Main.buildpath,\"c-plot.svg\"))><figcaption>Concentration field for the entire domain</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"Note that we passed domain and not img to the TortuositySimulation constructor, since we are using the entire image (both true and false voxels) as the domain, and we only use the img to generate the diffusivity field.","category":"page"},{"location":"variable_diffusivity/#Subdomain-as-domain","page":"Variable diffusivity","title":"Subdomain as domain","text":"","category":"section"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"This example is similar to the first one, but we only consider a subdomain of the image as the domain. Assume we have a porous medium (described by a binary image) with a variable diffusivity field. Just to demonstrate the variable diffusivity, let's assume a random diffusivity field.","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"using Tortuosity\nusing Tortuosity: tortuosity, vec_to_grid\n\nUSE_GPU = false\n\n# Generate a test image\nimg = Imaginator.blobs(; shape=(64, 64, 1), porosity=0.65, blobiness=0.5, seed=2)\n\n# Define the diffusivity field\nD = rand(size(img)...)      # Random diffusivity field\nD[.!img] .= 0               # Non-conducting  \ndomain = D .> 0             # Define domain as only-conducting voxels\n\n# Define the simulation\nsim = TortuositySimulation(domain; axis=:x, D=D, gpu=USE_GPU);\n\n# Solve the system of equations\nsol = solve(sim.prob, KrylovJL_CG())\n\n# Convert the solution vector to an Nd grid\nc = vec_to_grid(sol.u, domain)\n# Compute the tortuosity factor\nτ = tortuosity(c; axis=:x, D=D)\nprintln(\"τ = $τ\")\n\n# Visualize the concentration field\nusing Plots\nheatmap(img[:,:,1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"img-plot-partial-domain.svg\"); nothing # hide\nheatmap(c[:, :, 1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"c-plot-partial-domain.svg\"); nothing # hide","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"HTML(\"\"\"<figure><img src=$(joinpath(Main.buildpath,\"img-plot-partial-domain.svg\"))><figcaption>Original binary image used to assign diffusivity</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"HTML(\"\"\"<figure><img src=$(joinpath(Main.buildpath,\"c-plot-partial-domain.svg\"))><figcaption>Concentration field</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"variable_diffusivity/","page":"Variable diffusivity","title":"Variable diffusivity","text":"Note that in this case, domain is essentially the same as img, but we still define it separately to demonstrate how to use a variable diffusivity field. The diffusivity field D is defined only for the conducting voxels, and the non-conducting voxels are set to zero.","category":"page"},{"location":"imaginator/#Imaginator.jl","page":"Imaginator","title":"Imaginator.jl","text":"","category":"section"},{"location":"imaginator/","page":"Imaginator","title":"Imaginator","text":"Imaginator.jl is a submodule within Tortuosity.jl to generate synthetic 3D voxel images of porous media plus some utilities to manipulate them. The main goal of Imaginator.jl is to provide a simple way to generate 3D images of porous media for testing and benchmarking purposes. If you're familiar with the PoreSpy package in Python, you can think of Imaginator.jl as a stripped-down generators module in PoreSpy.","category":"page"},{"location":"imaginator/#Example-usage","page":"Imaginator","title":"Example usage","text":"","category":"section"},{"location":"imaginator/","page":"Imaginator","title":"Imaginator","text":"using Plots\nusing Tortuosity\n\nimg = Imaginator.blobs(shape=(64, 64, 1), porosity=0.5, blobiness=0.5, seed=2)\neps = Imaginator.phase_fraction(img)\n@info \"Phase fraction:\\n$eps\"\n\n# Visualize the generated image\nheatmap(img[:, :, 1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"blobs-init.svg\"); nothing # hide\n\n# Remove non-percolating paths along the x-axis\nimg = Imaginator.trim_nonpercolating_paths(img, axis=:x)\neps = Imaginator.phase_fraction(img)\n@info \"Phase fraction after trimming:\\n$eps\"\n\n# Visualize the trimmed image\nheatmap(img[:, :, 1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"blobs-trimmed.svg\"); nothing # hide","category":"page"},{"location":"imaginator/","page":"Imaginator","title":"Imaginator","text":"HTML(\"\"\"<figure><img src=$(joinpath(Main.buildpath,\"blobs-init.svg\"))><figcaption>Initial blobs image</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"imaginator/","page":"Imaginator","title":"Imaginator","text":"HTML(\"\"\"<figure><img src=$(joinpath(Main.buildpath,\"blobs-trimmed.svg\"))><figcaption>Blobs image after trimming non-percolating paths</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"benchmark/#Performance-benchmarks","page":"Benchmark","title":"Performance benchmarks","text":"","category":"section"},{"location":"benchmark/","page":"Benchmark","title":"Benchmark","text":"The following benchmarks compare the performance of Tortuosity.jl to other popular libraries, namely, taufactor and PuMA.","category":"page"},{"location":"benchmark/","page":"Benchmark","title":"Benchmark","text":"info: Info\nThe content of this page is work in progress.","category":"page"},{"location":"#Tortuosity.jl","page":"Getting started","title":"Tortuosity.jl","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"Tortuosity.jl is a GPU-accelerated solver to compute the tortuosity factor (tau) of voxel images of porous media. You can think of Tortuosity.jl as the equivalent of TauFactor toolbox in MATLAB, or taufactor in Python, but a bit faster.","category":"page"},{"location":"#Installation","page":"Getting started","title":"Installation","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"To install Tortuosity.jl, simply run the following command in the Julia REPL:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(\"Tortuosity\")","category":"page"},{"location":"#Basic-usage","page":"Getting started","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Getting started","title":"Getting started","text":"To compute the tortuosity factor of a voxel image, you can use the following workflow:","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"using Plots\nusing Tortuosity\nusing Tortuosity: tortuosity, vec_to_grid\n\nUSE_GPU = false\n\n# Generate a test image\nimg = Imaginator.blobs(; shape=(64, 64, 1), porosity=0.65, blobiness=0.5, seed=2);\nimg = Imaginator.trim_nonpercolating_paths(img, axis=:x)\n\n# Visualize the image\nheatmap(img[:, :, 1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"img-readme.svg\"); nothing # hide\n\n# Define the simulation\nsim = TortuositySimulation(img; axis=:x, gpu=USE_GPU);\n\n# Solve the system of equations\nsol = solve(sim.prob, KrylovJL_CG(); verbose=false, reltol=1e-5);\n\n# Convert the solution vector to an Nd grid\nc = vec_to_grid(sol.u, img)\n# Compute the tortuosity factor\nτ = tortuosity(c; axis=:x)\nprintln(\"τ = $τ\")\n\n# Visualize the concentration field\nheatmap(c[:, :, 1]; aspect_ratio=:equal, clim=(0, 1))\nsavefig(\"c-readme.svg\"); nothing # hide","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"HTML(\"\"\"<figure><img src=\"img-readme.svg\"><figcaption>Original binary image</figcaption></figure>\"\"\") # hide","category":"page"},{"location":"","page":"Getting started","title":"Getting started","text":"HTML(\"\"\"<figure><img src=\"c-readme.svg\"><figcaption>Concentration field</figcaption></figure>\"\"\") # hide","category":"page"}]
}
